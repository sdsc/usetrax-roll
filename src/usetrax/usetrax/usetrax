#!/bin/env python

from optparse import OptionParser
import datetime
import re
import socket
import sys
import time

class usetrax:
  """
  usetrax - show resource usage info collected by the usetrax daemon

  usetrax [-h -v] [--end=time] [--server=str] [--start=time] [--step=int]
          [--sum=str] resource

  Options:

    -h
      Show this information, then exit

    -v
      Print version, then exit

    --end=time
      The end of the time range to display; defaults to the current time.
      The time specification may be given as an integer (seconds since epoch),
      a string of the format "-nn[smhd]" (number of seconds/minutes/hours/days
      before the current time, defaults to minutes), or a date/time string of
      the format "YYYY-MM-DD:HH:MM[:SS]".

    --server=str
      The usetraxd server to contact to retrive usage information.  The format
      is "host[:port]".  Defaults to localhost:7734.
      
    --start=time
      The beginning of the time range to display; defaults to 0.  See --end
      for time format.

    --step=int
      Summarize usage information every int seconds throughout the start/end
      range.  Summarizes the entire range by default.

    --sum=str
      Sum usage information by a resource attribute.  Curently supports
      attributes "job" and "user".
  """

  VERSION = '1.0'

  def __init__(self):

    # Parse options and store into self
    parser = OptionParser(
      add_help_option=False, version="%prog " + str(self.__class__.VERSION)
    )
    parser.add_option('-h', action='store_true')
    parser.add_option('-v', action='store_true')
    parser.add_option('--server', type='string')
    parser.add_option('--start', type='string')
    parser.add_option('--end', type='string')
    parser.add_option('--step', type='int')
    parser.add_option('--sum', type='string')

    (options, args) = parser.parse_args()
    if options.h:
      help(self.__class__)
      sys.exit(0)
    if options.v:
      parser.print_version()
      sys.exit(1)

    self.server = 'localhost:7734'
    if options.server:
      self.server = options.server
    self.start = 0
    if options.start:
      self.start = self.parse_time(options.start)
    self.end = int(time.time())
    if options.end:
      self.end = self.parse_time(options.end)
    self.step = None
    if options.step:
      self.step = int(options.step)
    self.sumBy = None
    if options.sum:
      self.sumBy = options.sum
    if len(args) == 1:
      self.resource = args[0]
    else:
      help(self.__class__)
      sys.exit(0)

    # Open a connection to the usetrax daemon
    (addr, port) = (self.server, 7734)
    if self.server.find(':') >= 0:
      (addr, port) = self.server.split(':', 1)
    self.serverSocket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    self.serverSocket.connect((addr, int(port)))

    # Get host and sum-by information for all clients--quicker than retrieving
    # it individually for those clients we care about.
    clientHosts = { }
    clientSumBy = { }
    # GET inefficient, so use HISTORY even for host attr
    self.send("HISTORY * * %s host" % self.end)
    reply = self.recv()
    # HISTORY reply format "OK [server,client,attr,timestamp,value]..."
    if reply.startswith('OK ['):
      for item in reply[4:len(reply) - 1].split(']['):
        (server,client,attr,timestamp,value) = item.split(',')
        clientHosts[client] = value
    if self.sumBy:
      self.send("HISTORY * * 0-%s %s" % (self.end, self.sumBy))
      reply = self.recv()
      if reply.startswith('OK ['):
        for item in reply[4:len(reply) - 1].split(']['):
          (server,client,attr,timestamp,value) = item.split(',')
          if not clientSumBy.has_key(client):
            clientSumBy[client] = []
          clientSumBy[client].append((int(timestamp), "%s=%s" % (self.sumBy, value)))

    # foreach time step ...
    if not self.step:
      self.step = self.end - self.start + 1
    for timestep in range(self.start, self.end, self.step):
      endStep = timestep + self.step - 1
      usageThisStep = { }
      self.send("SUM %s * %s-%s *" % (self.resource, self.start, endStep))
      reply = self.recv()
      # SUM reply format "OK [server,client,attr,sum]..."
      if reply.startswith('OK ['):
        # foreach server/client/attr/sum tuple from this time step ...
        for value in reply[4:len(reply) - 1].split(']['):
          (server, client, attr, sum) = value.split(',')
          # Determine "user".  If we're summing job/user and we have a summary
          # attribute for this client, use that; otherwise, if we have a host
          # name for the client, use that; otherwise, client (ip address)
          if clientSumBy.has_key(client) and \
             timestep >= clientSumBy[client][0][0]:
            # Pop older values of clientSumBy for this client
            while len(clientSumBy[client]) > 1 and \
                  timestep >= clientSumBy[client][1][0]:
              clientSumBy[client].pop(0)
            user = clientSumBy[client][0][1]
          elif clientHosts.has_key(client):
            user = clientHosts[client]
          else:
            user = client
          # Add to attribute summary for this "user"
          if not usageThisStep.has_key(user):
            usageThisStep[user] = { }
          if not usageThisStep[user].has_key(attr):
            usageThisStep[user][attr] = 0
          usageThisStep[user][attr] += int(float(sum))
          # Compute 'total' values that sum per-user reads and writes
          if attr.startswith('read') or attr.startswith('write'):
            totalattr = attr.replace('read', 'total').replace('write', 'total')
            if not usageThisStep[user].has_key(totalattr):
              usageThisStep[user][totalattr] = 0
            usageThisStep[user][totalattr] += int(float(sum))

      for user in sorted(usageThisStep.keys()):
        display = "%s %s " % (timestep, user)
        for attr in sorted(usageThisStep[user].keys()):
          display += ' %s %s' % (attr, usageThisStep[user][attr])
        print display
        sys.stdout.flush()

  def parse_time(self, s):
    """
    Parses the time specification given with the --start and --end command-line
    options.  Returns the specified time in seconds since the epoch.
    """
    result = int(time.time())
    if re.match('^\d+$', s):
      result = int(s)
    elif re.match('^-\d+[dDhHmMsS]?$', s):
      matchInfo = re.match('^-(\d+)([dDhHmMsS]?)$', s)
      bump = int(matchInfo.group(1))
      ch = 'm'
      if matchInfo.group(2):
        ch = matchInfo.group(2).lower()
      if ch == 'd':
        result -= bump * 24 * 60 * 60
      elif ch == 'h':
        result -= bump * 60 * 60
      elif ch == 's':
        result -= bump
      else:
        result -= bump * 60
    elif re.match('^\d\d\d\d-\d\d-\d\d:\d\d', s):
      matchInfo = re.match('^(\d+)-(\d+)-(\d+):(\d+)(:(\d+))?', s)
      minute = 0
      if matchInfo.group(6) != None:
        minute = int(matchInfo.group(6))
      dt = datetime.datetime(year = int(matchInfo.group(1)),
                             month = int(matchInfo.group(2)),
                             day = int(matchInfo.group(3)),
                             hour = int(matchInfo.group(4)),
                             minute = minute)
      result = int(time.mktime(dt.timetuple()))
    else:
      pass
    return result

  def recv(self):
    """
    A convenience method for receiving a message from the usetrax daemon.
    """
    result = ''
    while not result.endswith("\n"):
      chunk = self.serverSocket.recv(2560)
      if chunk == '':
        result = None
        break
      result += chunk
    if not result:
      sys.stderr.write('usetrax daemon closed connection\n')
      sys.exit(1)
    elif not result.startswith('OK '):
      sys.stderr.write('Garbled message "%s" from usetrax daemon\n' % result)
      sys.exit(1)
    return result.strip()

  def send(self, message):
    """
    A convenience method for sending a message to the usetrax daemon.
    """
    self.serverSocket.send(message + "\n")

usetrax()
