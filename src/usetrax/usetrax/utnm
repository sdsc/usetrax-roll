#!/bin/env python

from ConfigParser import SafeConfigParser
import commands
import daemon
from optparse import OptionParser
from os.path import expanduser
import re
import socket
import subprocess
import sys
import time

class utnm:
  """
  utnm - network traffic monitor daemon for usetrax

  utnm [-h -v] [--config=path] [--iface=str] [--ifconfig=path]
       [--localaddr=pat] [--log=path] [--packets=int] [--pause=int]
       [--promiscuous=y/n] [--run=int[smhd]] [--server=str]
       [--tcpdump=path]

  This program uses tcpdump to sample traffic on a network interface and
  sends summary statistics to a usetrax data base daemon (utdb).

  Options:

    -h
      Show this information, then exit

    -v
      Print version, then exit

    --config=path
      Path to usetrax config file.  Defaults to ~/.usetrax.

    Other command-line options correspond to the configuration file
    options listed below.  If an option appears both on the command line
    and in the config file, the command line value takes precedence.

  Configuration options for utnm are in section [utnm].
  Config file options:

    iface: str
      The interface to monitor.  Defaults to eth0.

    ifconfig: path
      Path to ifconfig program.  Default to /sbin/ifconfig.

    localaddr: pat
      A pattern to match the local addresses assigned to the monitored
      interface.  If not specified, the program parses the output of
      ifconfig to obtain the address.

    log: path
      Path to monitor log file.   Defaults to "/var/log/utnm.log".

    packets: int
      The number of r/w packets to analyze in each sample.  Defaults to
      10000.

    pause: int
      The number of seconds to sleep between samples.  Defaults to 5.

    promiscuous: y/n
      Whether to run tcpdump with the interface in promiscuous mode.
      The default is 'n'; on some systems (e.g., Solaris), this will
      prevent the program from seeing outbound packets.

    run: int[smhd]
      Exit after running for the specified seconds/minutes/hours/days
      (defaults to 'h').  By default the program continues running until
      killed.

    server: str
      Contact information for the usetrax daemon; format host[:port].
      Defaults to printing messages to stdout for debugging.

    tcpdump: path
      Path to tcpdump program.  Default to /usr/sbin/tcpdump.
  """

  VERSION = '1.0'

  def __init__(self):

    # Parse options and store into self
    parser = OptionParser(
      add_help_option=False, version="%prog " + str(self.__class__.VERSION)
    )
    parser.add_option('-h', action='store_true')
    parser.add_option('-v', action='store_true')
    parser.add_option('--config', type='string')
    parser.add_option('--iface', type='string')
    parser.add_option('--ifconfig', type='string')
    parser.add_option('--localaddr', type='string')
    parser.add_option('--log', type='string')
    parser.add_option('--packets', type='int')
    parser.add_option('--pause', type='int')
    parser.add_option('--promiscuous', type='string')
    parser.add_option('--run', type='string')
    parser.add_option('--server', type='string')
    parser.add_option('--tcpdump', type='string')

    (options, args) = parser.parse_args()
    if options.h:
      help(self.__class__)
      sys.exit(0)
    if options.v:
      parser.print_version()
      sys.exit(1)

    self.config = expanduser('~') + '/.usetrax'
    if options.config:
      self.config = options.config

    self.iface = 'eth0'
    self.ifconfig = '/sbin/ifconfig'
    self.localaddr = None
    self.logpath = '/var/log/utnm.log'
    self.packets = 10000
    self.pause = 5
    self.promiscuous = False
    self.runlength = None
    self.server = None
    self.tcpdump = '/usr/sbin/tcpdump'

    parser = SafeConfigParser()
    parser.read(self.config)
    if options.iface:
      self.iface = options.iface
    elif parser.has_option('utnm', 'iface'):
      self.iface = parser.get('utnm', 'iface')
    if options.ifconfig:
      self.ifconfig = options.ifconfig
    elif parser.has_option('utnm', 'ifconfig'):
      self.ifconfig = parser.get('utnm', 'ifconfig')
    if options.localaddr:
      self.localaddr = options.localaddr
    elif parser.has_option('utnm', 'localaddr'):
      self.localadd = parser.get('utnm', 'localaddr')
    if options.log:
      self.logpath = options.log
    elif parser.has_option('utnm', 'log'):
      self.logpath = parser.get('utnm', 'log')
    if options.packets:
      self.packets = options.packets
    elif parser.has_option('utnm', 'packets'):
      self.packets = parser.getint('utnm', 'packets')
    if options.pause != None:
      self.pause = options.pause
    elif parser.has_option('utnm', 'pause'):
      self.pause = parser.getint('utnm', 'pause')
    if options.promiscuous:
      self.promiscuous = options.promiscuous == 'y'
    elif parser.has_option('utnm', 'promiscuous'):
      self.promiscuous = parser.get('utnm', 'promiscuous') == 'y'
    if options.run:
      self.runlength = options.run
    elif parser.has_option('utnm', 'run'):
      self.runlength = parser.get('utnm', 'run')
    if options.server:
      self.server = options.server
    elif parser.has_option('utnm', 'server'):
      self.server = parser.get('utnm', 'server')
    if options.tcpdump:
      self.tcpdump = options.tcpdump
    elif parser.has_option('utnm', 'tcpdump'):
      self.tcpdump = parser.get('utnm', 'tcpdump')

    output = commands.getoutput(self.ifconfig + ' ' + self.iface)
    match_info = re.search('inet (addr:)?([\.0-9]+)', output)
    if not match_info:
      print 'Unknown interface ' + self.iface
      sys.exit(1)
    if not self.localaddr:
      self.localaddr = match_info.group(2)
    self.end_time = None
    if self.runlength:
      self.end_time = int(time.time())
      match_info = re.match('^(\d+)([sSmMhHdD])?$', self.runlength)
      if not match_info:
        help(self.__class__)
        sys.exit(1)
      bump = int(match_info.group(1))
      if match_info.group(2):
        unit = match_info.group(2).lower()
      else:
        unit = 'h'
      if unit == 's':
        self.end_time += bump
      elif unit == 'm':
        self.end_time += bump * 60
      elif unit == 'h':
        self.end_time += bump * 60 * 60
      else:
        self.end_time += bump * 60 * 60 * 24

    if self.server:
      if self.server.find(':') < 0:
        self.server += ':7734'
      # Test connecting to the utdb
      sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
      (addr, port) = self.server.split(':', 1)
      sock.connect((addr, int(port)))
      sock.close()

    self.log("Monitor configuration:")
    self.log("config: %s" % self.config)
    self.log("iface: %s" % self.iface)
    self.log("ifconfig: %s" % self.ifconfig)
    self.log("localaddr: %s" % self.localaddr)
    self.log("logpath: %s" % self.logpath)
    self.log("packets: %s" % self.packets)
    self.log("pause: %s" % self.pause)
    self.log("promiscuous: %s" % self.promiscuous)
    self.log("run: %s" % self.runlength)
    self.log("server: %s" % self.server)
    self.log("tcpdump: %s" % self.tcpdump)

  def run(self):
    """
    utnm daemon body.  Wake periodically to run tcpdump and report
    traffic to the utdb daemon.
    """

    self.client_traffic = { }
    tcpdump_words = [
      self.tcpdump, '-c', str(self.packets), '-i', self.iface, '-nn'
    ]
    if not self.promiscuous:
      tcpdump_words.append('-p')
    # Only care about push packets
    tcpdump_words.append('tcp[13] & 8 == 8')

    try:

      while True:

        start_time = int(time.time())
        if self.end_time and start_time >= self.end_time:
          break

        # Collect stdout from a tcpdump process that monitors push packets
        self.log("Starting tcpdump parsing at %s" % start_time);
        tcpdump = subprocess.Popen(
          tcpdump_words, stdout=subprocess.PIPE, bufsize=0
        )

        for line in tcpdump.stdout:
          unused_lines = 0
          # Sample tcpdump output:
          # 11:49:35.379446 IP 198.202.118.30.1023 > 172.25.33.246.988: P 2842811501:2842811789(288) ack 280752543 win 126
          (ts,prot,src,arrow,dst,flags,size,tail)=re.split('\s+', line, 7)
          # Parse the packet size and source and destination ips.  TODO: the
          # ports stripped from the source and destination might be used to
          # differentiate multiple clients on a single machine.
          match_info = re.search('\((\d+)\)', size)
          if not match_info:
            unused_lines += 1
            continue
          size = int(match_info.group(1))
          match_info = re.match('^(.*)\.(\d+)$', src)
          (src_addr, src_port) = (match_info.group(1), match_info.group(2))
          match_info = re.match('^(.*)\.(\d+):$', dst)
          (dst_addr, dst_port) = (match_info.group(1), match_info.group(2))
          # Match src against local addr to determine if this is a read or write
          if re.match(self.localaddr, src_addr):
            action = 'read'
            client = dst_addr
          else:
            action = 'write'
            client = src_addr
          # Update client's traffic record
          if not self.client_traffic.has_key(client):
            self.client_traffic[client] = {
              'readBytes': 0,
              'readMessages': 0,
              'writeBytes': 0,
              'writeMessages': 0
            }
          self.client_traffic[client][action + 'Bytes'] += size
          self.client_traffic[client][action + 'Messages'] += 1
          # If traffic is sparse, periodically report to the usetrax daemon
          # and flush so that we're not summarizing over too long a period
          if int(time.time()) - start_time >= 5:
            self.report_traffic()
            start_time = int(time.time())

        self.report_traffic()
        if self.pause > 0:
          time.sleep(self.pause)

    except Exception, x:

      self.log('%s' % x)

  def log(self, message):
    """
    A convenience method for writing a message to the log file.
    """
    logfile = open(self.logpath, 'a+')
    logfile.write(message + "\n")
    logfile.close()


  def report_traffic(self):
    """
    Reports traffic information collected so far to the usetrax daemon,
    then reinitializes the information collection.
    """
    resource = commands.getoutput('/bin/hostname');
    now = int(time.time())
    sock = None
    if self.server:
      sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
      (addr, port) = self.server.split(':', 1)
      try:
        sock.connect((addr, int(port)))
      except Exception, x:
        self.log('%s' % x)
    for client in self.client_traffic.keys():
      ct = self.client_traffic[client]
      for attr in ct.keys():
        message = "SET %s %s %s %s %s" % (resource, client, now, attr, ct[attr])
        self.log(message)
        if sock:
          try:
            sock.send(message + "\n")
            # Receive and discard ack
            sock.recv(256)
          except Exception, x:
            self.log('%s' % x)
    if sock:
      sock.close()
    self.client_traffic = { }

monitor = utnm()
context = daemon.DaemonContext()
# python 2.4 version
context.open()
try:
  monitor.run()
finally:
  context.close()
# python 2.5+ version
# with daemon.DaemonContext():
#   monitor.run()
