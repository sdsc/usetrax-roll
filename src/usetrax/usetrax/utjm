#!/bin/env python

import commands
from ConfigParser import SafeConfigParser
import daemon
from optparse import OptionParser
import os
from os.path import expanduser
import re
import socket
import sys
import time

class utjm:
  """
  utjm - batch job monitor daemon for usetrax

  utjm [-h -v] [--config=path] [--log=path] [--pause=int]
       [--resource=str] [--server=str]

  This program parses qstat output to send batch job information to a
  usetrax data base daemon (utdb).

  Options:

    -h
      Show this information, then exit

    -v
      Print version, then exit

    --config=path
      Path to usetrax config file.  Defaults to ~/.usetrax.

    Other command-line options correspond to the configuration file
    options listed below.  If an option appears both on the command line
    and in the config file, the command line value takes precedence.

  Configuration options for utjm are in section [utjm].
  Config file options:

    log: path
      Path to monitor log file.   Defaults to "/var/log/utjm.log".

    pause: int
      The number of seconds to sleep between monitoring.  Defaults to 300.

    resource: str
      The name of the resource being monitored.  Default is derived from
      the host name.

    server: str
      Contact information for the utdb daemon; format host[:port].
      Defaults to only logging batch job information--no utdb connection.
  """

  VERSION = '1.0'

  def __init__(self):

    # Parse options and store into self
    parser = OptionParser(
      add_help_option=False, version="%prog " + str(self.__class__.VERSION)
    )
    parser.add_option('-h', action='store_true')
    parser.add_option('-v', action='store_true')
    parser.add_option('--config', type='string')
    parser.add_option('--log', type='string')
    parser.add_option('--pause', type='int')
    parser.add_option('--resource', type='string')
    parser.add_option('--server', type='string')

    (options, args) = parser.parse_args()
    if options.h:
      help(self.__class__)
      sys.exit(0)
    if options.v:
      parser.print_version()
      sys.exit(1)

    self.config = expanduser('~') + '/.usetrax'
    if options.config:
      self.config = options.config

    self.logpath = '/var/log/utjm.log'
    self.pause = 300
    self.resource = re.split('[-\.]', commands.getoutput('/bin/hostname'))[0]
    self.server = None

    parser = SafeConfigParser()
    parser.read(self.config)
    if options.log:
      self.logpath = options.log
    elif parser.has_option('utjm', 'log'):
      self.logpath = parser.get('utjm', 'log')
    if options.pause != None:
      self.pause = options.pause
    elif parser.has_option('utjm', 'pause'):
      self.pause = parser.getint('utjm', 'pause')
    if options.resource:
      self.resource = options.resource
    elif parser.has_option('utjm', 'resource'):
      self.resource = parser.get('utjm', 'resource')
    if options.server:
      self.server = options.server
    elif parser.has_option('utjm', 'server'):
      self.server = parser.get('utjm', 'server')

    if self.server:
      if self.server.find(':') < 0:
        self.server += ':7734'
      # Test connecting to the utdb
      sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
      (addr, port) = self.server.split(':', 1)
      sock.connect((addr, int(port)))
      sock.close()

  def log(self, message):
    """
    A convenience method for writing a message to the log file.
    """
    try:
      stat = os.stat(self.logpath)
      if stat.st_size >= 1000000:
        os.rename(self.logpath, self.logpath + '.1')
    except:
      pass
    logfile = open(self.logpath, 'a+')
    logfile.write(message + "\n")
    logfile.close()

  def run(self):
    """
    utjm daemon body.  Wake periodically to sample qsub and report any
    change in host/job and host/user mapping to the utdb daemon.
    """

    host_jobs_reported = { }
    host_users_reported = { }

    while True:

      now = int(time.time())
      sock = None
      if self.server:
        sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
        (addr, port) = self.server.split(':', 1)
        try:
          sock.connect((addr, int(port)))
        except Exception, x:
          self.log('%s' % x)

      for line in commands.getoutput('qstat -n1').split("\n"):

        pieces = re.split('\s+', line)

        if len(pieces) < 10 or pieces[9] != 'R':
          # Not a running job
          continue
        match_info = re.search('^(\d+)', pieces[0])
        if not match_info:
          self.log("Bad qstat line format '%s'" % line)
          continue

        job = "%s-%s" % (match_info.group(1), self.resource)
        hosts = pieces[-1]
        user = pieces[1]

        for host in re.split('\+', hosts):
          host = host.split('/', 1)[0]
          if not host_jobs_reported.has_key(host) or \
             host_jobs_reported[host] != job:
            message = "SET %s %s %s job %s" % (self.resource, host, now, job)
            self.log(message)
            if sock:
              try:
                sock.send(message + "\n")
                # Receive and discard ack
                sock.recv(256)
              except Exception, x:
                self.log('%s' % x)
            host_jobs_reported[host] = job
          if not host_users_reported.has_key(host) or \
             host_users_reported[host] != user:
            message = "SET %s %s %s user %s" % \
                      (self.resource, host, now, user)
            self.log(message)
            if sock:
              try:
                sock.send(message + "\n")
                # Receive and discard ack
                sock.recv(256)
              except Exception, x:
                self.log('%s' % x)
            host_users_reported[host] = user
      
      if sock:
        sock.close()
      time.sleep(self.pause)

monitor = utjm()
context = daemon.DaemonContext()
# python 2.4 version
context.open()
try:
  monitor.run()
finally:
  context.close()
# python 2.5+ version
# with daemon.DaemonContext():
#   monitor.run()
