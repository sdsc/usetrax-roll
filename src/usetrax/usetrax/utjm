#!/bin/env python

from optparse import OptionParser
import commands
from ConfigParser import SafeConfigParser
import daemon
import os
from os.path import expanduser
import re
import socket
import sys
import time

class usetraxjobmon:
  """
  usetraxjobmon - batch job monitor daemon for usetrax

  usetraxjobmon [-h -v] [--config=path]

  This program parses the output of qstat to send batch job information
  to a usetrax data base daemon.

  Options:

    -h
      Show this information, then exit

    -v
      Print version, then exit

    --config=path
      Path to daemon config file.  Defaults to ~/.usetrax.

  Configuration options for usetraxjobmon are in section [jobmon].
  Config file options:

    log: path
      Path to monitor log file.   Defaults to "usetraxjobmon.log".

    pause: int
      The number of seconds to sleep between monitoring.  Defaults to 300.

    resource: str
      The name of the resource being monitored.  Default is derived from
      the host name.

    server: str
      Contact information for the usetrax daemon; format host[:port].
      Defaults to sending messages only to log file.
  """

  VERSION = '1.0'

  def __init__(self):

    # Parse options and store into self
    parser = OptionParser(
      add_help_option=False, version="%prog " + str(self.__class__.VERSION)
    )
    parser.add_option('-h', action='store_true')
    parser.add_option('-v', action='store_true')
    parser.add_option('--config', type='string')

    (options, args) = parser.parse_args()
    if options.h:
      help(self.__class__)
      sys.exit(0)
    if options.v:
      parser.print_version()
      sys.exit(1)

    self.config = expanduser('~') + '/.usetrax'
    if options.config:
      self.config = options.config

    self.logpath = 'usetraxjobmon.log'
    self.pause = 300
    self.resource = re.split('[-\.]', commands.getoutput('/bin/hostname'))[0]
    self.server = None

    parser = SafeConfigParser()
    parser.read(self.config)
    if parser.has_option('jobmon', 'log'):
      self.logpath = parser.get('jobmon', 'log')
    if parser.has_option('jobmon', 'pause'):
      self.pause = parsr.getint('jobmon', 'pause')
    if parser.has_option('jobmon', 'resource'):
      self.resource = parser.get('jobmon', 'resource')
    if parser.has_option('jobmon', 'server'):
      self.server = parser.get('jobmon', 'server')

    # If appropriate, open a connection to the usetrax daemon
    self.server_socket = None
    if self.server:
      self.server_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
      (addr, port) = (self.server, 7734)
      if self.server.find(':') >= 0:
        (addr, port) = self.server.split(':', 1)
      self.server_socket.connect((addr, int(port)))

  def log(self, message):
    """
    TODO
    """
    logfile = open(self.logpath, 'a+')
    logfile.write(message + "\n")
    logfile.close()

  def report(self, message):
    """
    TODO
    """
    self.log(message)
    if self.server_socket:
      self.server_socket.send(message + "\n")
      # Receive and discard ack
      self.server_socket.recv(256)

  def run(self):
    """
    TODO
    """

    host_jobs_reported = { }
    host_users_reported = { }

    try:

      while 1:

        now = int(time.time())

        for line in commands.getoutput('qstat -n1').split("\n"):

          pieces = re.split('\s+', line)

          if len(pieces) < 10 or pieces[9] != 'R':
            # Not a running job
            continue
          match_info = re.search('^(\d+)', pieces[0])
          if not match_info:
            self.log("Bad qstat line format '%s'" % line)
            continue

          job = "%s-%s" % (match_info.group(1), self.resource)
          hosts = pieces[-1]
          user = pieces[1]

          for host in re.split('\+', hosts):
            host = host.split('/', 1)[0]
            if not host_jobs_reported.has_key(host) or \
               host_jobs_reported[host] != job:
              message = "SET %s %s %s job %s" % (self.resource, host, now, job)
              self.report(message)
              host_jobs_reported[host] = job
            if not host_users_reported.has_key(host) or \
               host_users_reported[host] != user:
              message = "SET %s %s %s user %s" % \
                        (self.resource, host, now, user)
              self.report(message)
              host_users_reported[host] = user

        time.sleep(self.pause)

    except Exception, x:

      self.log('%s' % x)

monitor = usetraxjobmon()
context = daemon.DaemonContext()
context.files_preserve = [monitor.server_socket]
# python 2.4 version
context.open()
try:
  monitor.run()
finally:
  context.close()
# python 2.5+ version
# with daemon.DaemonContext():
#   monitor.run()
